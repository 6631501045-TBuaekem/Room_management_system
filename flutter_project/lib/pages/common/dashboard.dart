import 'package:flutter/material.dart';
import 'dart:convert';
import 'dart:math'; // üü¢ ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ math ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ ceil()
import '../../utills/session_cilent.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SessionHttpClient
import 'package:http/http.dart' as http; // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° http ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

// üü¢ Global Singleton Instance: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà Loginpage ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
final session = SessionHttpClient();

class Dashboardpage extends StatefulWidget {
  const Dashboardpage({super.key});

  @override
  State<Dashboardpage> createState() => _DashboardpageState();
}

class _DashboardpageState extends State<Dashboardpage> {
  Map<String, dynamic> _dashboardData = {};
  late Future<void> _fetchDataFuture;

  // üü¢ ‡πÄ‡∏Å‡πá‡∏ö Role ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏î‡∏∂‡∏á Total Rooms)
  String _userRole = '0'; // Default to student role

  final Map<String, Color> colorMap = {
    "Total": const Color(0xFF554440),
    "Available": const Color(0xFF00A550),
    "Free": const Color(0xFF8DB6A4),
    "Pending": const Color(0xFFF3C327),
    "Reserved": const Color(0xFF4D4E8D),
    "Disabled": const Color(0xFFD62828),
  };

  final String baseUrl = 'http://10.0.2.2:3005';

  @override
  void initState() {
    super.initState();
    // üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Future ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
    _fetchDataFuture = _fetchInitialData();
  }

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏∂‡∏á Profile ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÉ‡∏î
  Future<void> _fetchInitialData() async {
    // 1. ‡∏î‡∏∂‡∏á Profile ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Role
    try {
      final profileUrl = Uri.parse('$baseUrl/profile');
      final profileResponse = await session.get(profileUrl);

      if (profileResponse.statusCode == 200) {
        final profileData = json.decode(profileResponse.body);
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Role
        if (mounted) {
          _userRole = profileData['role'] ?? '0';
        }
      }
    } catch (e) {
      print('Error fetching profile: $e');
      // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchSlotData ‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÅ‡∏°‡πâ‡∏î‡∏∂‡∏á role ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Ñ‡πà‡∏≤)
    }

    // 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å fetchSlotData ‡∏î‡πâ‡∏ß‡∏¢ Role ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    return fetchSlotData();
  }

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Rooms
  Future<void> fetchSlotData() async {
    final slotUrl = Uri.parse('$baseUrl/slotdashboard');
    int totalRoomsCount;
    int availableRoomsCount;

    try {
      final response = await session.get(slotUrl);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        final int freeCount =
            int.tryParse(data['freeSlots']?.toString() ?? '0') ?? 0;
        final int pendingCount =
            int.tryParse(data['pendingSlots']?.toString() ?? '0') ?? 0;
        final int reservedCount =
            int.tryParse(data['reservedSlots']?.toString() ?? '0') ?? 0;
        final int disabledRoomsCount =
            int.tryParse(data['disabledSlots']?.toString() ?? '0') ?? 0;

        // 1. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Active Slots
        final int activeSlotsCount = freeCount + pendingCount + reservedCount;

        // 2. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Available Rooms (Active Slots / 4)
        // Available Rooms = Active Slots Count / 4 (‡∏õ‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
        availableRoomsCount = (activeSlotsCount / 4).ceil();

        // 3. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Total Rooms (Available Rooms + Disabled Rooms)
        // Total Rooms = Available Rooms (‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì) + Disabled Rooms Count (‡∏à‡∏≤‡∏Å API)
        totalRoomsCount = availableRoomsCount + disabledRoomsCount;

        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå
        if (availableRoomsCount < 0) {
          availableRoomsCount = 0;
        }

        if (mounted) {
          setState(() {
            _dashboardData = {
              // ‡πÉ‡∏ä‡πâ Total Rooms ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å Available + Disabled
              "Total": {"count": totalRoomsCount, "key": "Total"},
              "Available": {"count": availableRoomsCount, "key": "Available"},

              "Free": {"count": freeCount, "key": "Free"},
              "Pending": {"count": pendingCount, "key": "Pending"},
              "Reserved": {"count": reservedCount, "key": "Reserved"},
              "Disabled": {"count": disabledRoomsCount, "key": "Disabled"},
              "date": data['date'] ?? 'N/A',
            };
          });
        }
      } else {
        if (response.statusCode == 401) {
          throw Exception('Authorization required. Please log in first.');
        }
        throw Exception(
          'Failed to load data from API (Status: ${response.statusCode})',
        );
      }
    } catch (e) {
      print('Error fetching dashboard data: $e');
      if (mounted) {
        setState(() {
          _dashboardData = {};
        });
      }
      rethrow;
    }
  }

  // Pull-to-Refresh
  Future<void> _onRefresh() async {
    setState(() {
      _fetchDataFuture = fetchSlotData();
    });
    return _fetchDataFuture;
  }

  // Free, Pending, Reserved
  Widget _buildStatusTile(String key, String label, Map<String, dynamic> data) {
    final item = data[key] as Map<String, dynamic>?;
    final count = item?['count']?.toString() ?? '0';
    final color = colorMap[key] ?? Colors.grey;

    return Container(
      decoration: BoxDecoration(
        color: color,
        borderRadius: BorderRadius.circular(20), // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
      ),
      child: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              count,
              style: const TextStyle(
                fontSize: 80, // ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
                fontWeight: FontWeight.bold,
                color: Colors.white,
              ),
            ),
            const SizedBox(height: 5),
            Text(
              label,
              textAlign: TextAlign.center,
              style: const TextStyle(fontSize: 25, color: Colors.white),
            ),
          ],
        ),
      ),
    );
  }

  // ¬†Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏¢‡πà‡∏≠‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ô Total Room (Available/Disabled)
  Widget _buildSubTile(String key, String label, Map<String, dynamic> data) {
    final item = data[key] as Map<String, dynamic>?;
    final count = item?['count']?.toString() ?? '0';
    final color = colorMap[key] ?? Colors.grey;

    return Expanded(
      child: Container(
        height: 60, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á
        decoration: BoxDecoration(
          color: color,
          borderRadius: BorderRadius.circular(10),
        ),
        padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
        child: Center(
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(
                label,
                style: const TextStyle(
                  fontSize: 18,
                  color: Colors.white,
                  fontWeight: FontWeight.w500,
                ),
              ),
              Text(
                count,
                style: const TextStyle(
                  fontSize: 25,
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // üî¥ Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏£‡∏ß‡∏° Total Room
  Widget _buildTotalRoomSection(Map<String, dynamic> data) {
    // üî¥ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Total ‡πÅ‡∏•‡∏∞ Disabled ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì/‡∏î‡∏∂‡∏á‡∏°‡∏≤
    final totalItem = data['Total'] as Map<String, dynamic>?;
    final totalCount = totalItem?['count']?.toString() ?? '0';
    final totalColor = colorMap['Total'] ?? Colors.grey;

    return Container(
      padding: const EdgeInsets.all(20),
      margin: const EdgeInsets.only(bottom: 20),
      height: 250, // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
      decoration: BoxDecoration(
        color: totalColor,
        borderRadius: BorderRadius.circular(25),
        border: Border.all(color: Colors.black, width: 2), // ‡∏Ç‡∏≠‡∏ö‡∏î‡∏≥
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Row ‡πÅ‡∏£‡∏Å: Total Room Title
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              const Text(
                'Total Room',
                style: TextStyle(
                  fontSize: 30,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á Total Count ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
              Text(
                totalCount,
                style: const TextStyle(
                  fontSize: 30,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),
          // Row ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: Available ‡πÅ‡∏•‡∏∞ Disable Tiles
          Expanded(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                _buildSubTile("Available", "Available Rooms", data),
                const SizedBox(height: 15),
                _buildSubTile("Disabled", "Disable Rooms", data),
              ],
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final String displayDate = _dashboardData['date'] ?? 'Loading...';

    // üî¥ Labels ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
    final Map<String, String> tileLabels = {
      "Free": "Free Slots",
      "Pending": "Pending Slots",
      "Reserved": "Reserve Slots",
    };
    final List<String> tileKeys = ["Free", "Pending", "Reserved"];

    return Scaffold(
      backgroundColor: const Color(0xFFFAF9F8), // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≠‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
      appBar: AppBar(
        title: const Text(
          'Dashboard',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 30),
        ),
        centerTitle: true,
        foregroundColor: Colors.black,
        backgroundColor: Colors.transparent, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ App Bar ‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™
        elevation: 0,
        bottom: const PreferredSize(
          preferredSize: Size.fromHeight(1.0),
          child: Divider(color: Colors.grey, thickness: 1, height: 1),
        ),
      ),
      // üü¢ ‡∏´‡πà‡∏≠ body ‡∏î‡πâ‡∏ß‡∏¢ RefreshIndicator
      body: RefreshIndicator(
        onRefresh: _onRefresh,
        child: SingleChildScrollView(
          physics: const AlwaysScrollableScrollPhysics(),
          child: Padding(
            padding: const EdgeInsets.all(30.0), // ‡∏•‡∏î Padding ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏á
            child: FutureBuilder(
              future: _fetchDataFuture,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting &&
                    _dashboardData.isEmpty) {
                  return ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight:
                          MediaQuery.of(context).size.height -
                          (Scaffold.of(context).appBarMaxHeight ?? 0) -
                          100,
                    ),
                    child: const Center(child: CircularProgressIndicator()),
                  );
                } else if (snapshot.hasError && _dashboardData.isEmpty) {
                  // ‡πÅ‡∏™‡∏î‡∏á Error Widget... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°)
                  return ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight:
                          MediaQuery.of(context).size.height -
                          (Scaffold.of(context).appBarMaxHeight ?? 0) -
                          100,
                    ),
                    child: Center(
                      child: Padding(
                        padding: const EdgeInsets.all(20.0),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              'Failed to load data from API: ${snapshot.error}',
                              style: const TextStyle(
                                color: Colors.red,
                                fontSize: 16,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _onRefresh,
                              icon: const Icon(Icons.refresh),
                              label: const Text('Retry'),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                }

                // üü¢ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    // üî¥ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                    Text(
                      "Dashboard of all rooms : Today ($displayDate)",
                      style: const TextStyle(fontSize: 30),
                    ),
                    const SizedBox(height: 20),

                    // 1. ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÉ‡∏´‡∏ç‡πà Total Room
                    _buildTotalRoomSection(_dashboardData),

                    // 2. ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡πà‡∏≠‡∏¢ (Free, Pending, Reserved)
                    // Row ‡πÅ‡∏£‡∏Å: Free (‡πÉ‡∏´‡∏ç‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢) + Pending (‡πÄ‡∏•‡πá‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô)
                    Row(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        // ‡∏Å‡∏•‡πà‡∏≠‡∏á Free
                        Expanded(
                          flex: 2,
                          child: AspectRatio(
                            aspectRatio: 1, // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                            child: _buildStatusTile(
                              tileKeys[0],
                              tileLabels[tileKeys[0]]!,
                              _dashboardData,
                            ),
                          ),
                        ),
                        const SizedBox(width: 20),
                        // ‡∏Å‡∏•‡πà‡∏≠‡∏á Pending
                        Expanded(
                          flex: 2,
                          child: AspectRatio(
                            aspectRatio: 1, // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                            child: _buildStatusTile(
                              tileKeys[1],
                              tileLabels[tileKeys[1]]!,
                              _dashboardData,
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 20),

                    // Row ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á: Reserved (‡∏¢‡∏≤‡∏ß‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á)
                    AspectRatio(
                      aspectRatio: 3, // ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
                      child: _buildStatusTile(
                        tileKeys[2],
                        tileLabels[tileKeys[2]]!,
                        _dashboardData,
                      ),
                    ),

                    // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° SizedBox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á
                    const SizedBox(height: 50),
                  ],
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}
