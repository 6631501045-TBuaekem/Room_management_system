import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../../utills/session_cilent.dart'; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ SessionHttpClient

// üü¢ Global Singleton Instance: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà Loginpage ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
final session = SessionHttpClient();

class Dashboardpage extends StatefulWidget {
  // üî¥ Constructor ‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠
  const Dashboardpage({super.key});

  @override
  State<Dashboardpage> createState() => _DashboardpageState();
}

class _DashboardpageState extends State<Dashboardpage> {
  // ‡πÉ‡∏ä‡πâ Map<String, dynamic> ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
  Map<String, dynamic> _dashboardData = {};

  // üü¢ ‡πÉ‡∏ä‡πâ Future<void> ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ
  late Future<void> _fetchDataFuture;

  // ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡πÉ‡∏ô State)
  final Map<String, Color> colorMap = {
    "Free": const Color(0xFF8DB6A4),
    "Pending": const Color(0xFFF3C327),
    "Reserved": const Color(0xFF4D4E8D),
    "Disabled": const Color(0xFFFE5F50),
  };

  // ‡∏ê‡∏≤‡∏ô URL ‡∏Ç‡∏≠‡∏á API ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì (‡πÉ‡∏ä‡πâ IP ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Android Emulator)
  final String baseUrl = 'http://10.0.2.2:3005';

  @override
  void initState() {
    super.initState();
    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤
    _fetchDataFuture = fetchSlotData();
  }

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> fetchSlotData() async {
    try {
      final url = Uri.parse('$baseUrl/slotdashboard');

      // üü¢ ‡πÉ‡∏ä‡πâ Global session.get() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á Cookie/Session
      final response = await session.get(url);

      if (response.statusCode == 200) {
        final data = json.decode(response.body);

        // ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
        final int freeCount =
            int.tryParse(data['freeSlots']?.toString() ?? '0') ?? 0;
        final int pendingCount =
            int.tryParse(data['pendingSlots']?.toString() ?? '0') ?? 0;
        final int reservedCount =
            int.tryParse(data['reservedSlots']?.toString() ?? '0') ?? 0;
        final int disabledCount =
            int.tryParse(data['disabledSlots']?.toString() ?? '0') ?? 0;

        if (mounted) {
          setState(() {
            _dashboardData = {
              "Free": {"count": freeCount, "key": "Free"},
              "Pending": {"count": pendingCount, "key": "Pending"},
              "Reserved": {"count": reservedCount, "key": "Reserved"},
              "Disabled": {"count": disabledCount, "key": "Disabled"},
              "date": data['date'] ?? 'N/A',
            };
          });
        }
      } else {
        if (response.statusCode == 401) {
          throw Exception('Authorization required. Please log in first.');
        }
        throw Exception(
          'Failed to load data from API (Status: ${response.statusCode})',
        );
      }
    } catch (e) {
      print('Error fetching dashboard data: $e');
      if (mounted) {
        setState(() {
          _dashboardData = {};
        });
      }
      rethrow;
    }
  }

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏•‡∏á (Pull-to-Refresh)
  Future<void> _onRefresh() async {
    setState(() {
      _fetchDataFuture = fetchSlotData();
    });
    return _fetchDataFuture;
  }

  @override
  Widget build(BuildContext context) {
    final List<String> statusKeys = ["Free", "Pending", "Reserved", "Disabled"];

    final List<Map<String, dynamic>> gridItems = statusKeys
        .map((key) => _dashboardData[key])
        .where((item) => item != null)
        .cast<Map<String, dynamic>>()
        .toList();

    final String displayDate = _dashboardData['date'] ?? 'Loading...';

    final Map<String, String> labelMap = {
      "Free": "Free Table",
      "Pending": "Pending Table",
      "Reserved": "Reserve Table",
      "Disabled": "Disable Room",
    };

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Dashboard',
          style: TextStyle(fontWeight: FontWeight.bold, fontSize: 30),
        ),
        centerTitle: true,
        foregroundColor: Colors.black,
        elevation: 0,
        bottom: const PreferredSize(
          preferredSize: Size.fromHeight(1.0),
          child: Divider(color: Colors.grey, thickness: 1, height: 1),
        ),
      ),
      // üü¢ ‡∏´‡πà‡∏≠ body ‡∏î‡πâ‡∏ß‡∏¢ RefreshIndicator
      body: RefreshIndicator(
        onRefresh: _onRefresh,
        child: SingleChildScrollView(
          // üî¥ ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Scroll ‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠
          physics: const AlwaysScrollableScrollPhysics(),
          child: Padding(
            padding: const EdgeInsets.all(50.0),
            child: FutureBuilder(
              future: _fetchDataFuture,
              builder: (context, snapshot) {
                if (snapshot.connectionState == ConnectionState.waiting &&
                    _dashboardData.isEmpty) {
                  // ‡πÉ‡∏ä‡πâ ConstrainedBox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Center ‡∏Å‡∏¥‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠ Loading
                  return ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight:
                          MediaQuery.of(context).size.height -
                          (Scaffold.of(context).appBarMaxHeight ?? 0) -
                          100,
                    ),
                    child: const Center(child: CircularProgressIndicator()),
                  );
                } else if (snapshot.hasError && _dashboardData.isEmpty) {
                  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ Error, ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Column ‡∏™‡∏π‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏•‡∏á‡∏°‡∏≤‡πÑ‡∏î‡πâ
                  return ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight:
                          MediaQuery.of(context).size.height -
                          (Scaffold.of(context).appBarMaxHeight ?? 0) -
                          100,
                    ),
                    child: Center(
                      child: Padding(
                        padding: const EdgeInsets.all(20.0),
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: ${snapshot.error}',
                              style: const TextStyle(
                                color: Colors.red,
                                fontSize: 16,
                              ),
                              textAlign: TextAlign.center,
                            ),
                            const SizedBox(height: 10),
                            ElevatedButton.icon(
                              onPressed: _onRefresh,
                              icon: const Icon(Icons.refresh),
                              label: const Text('‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                }

                // üü¢ ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
                return Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisSize:
                      MainAxisSize.min, // ‡πÉ‡∏´‡πâ Column ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                  children: [
                    const SizedBox(height: 30),
                    Text(
                      "Dashboard of all rooms : Today ($displayDate)",
                      style: const TextStyle(fontSize: 25),
                    ),
                    const SizedBox(height: 30),

                    // üî¥ AspectRatio ‡πÅ‡∏•‡∏∞ GridView ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á 4 ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    AspectRatio(
                      aspectRatio: 1.0,
                      child: GridView.count(
                        shrinkWrap: true, // ‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                        physics: const NeverScrollableScrollPhysics(),
                        crossAxisCount: 2,
                        crossAxisSpacing: 50,
                        mainAxisSpacing: 50,
                        children: gridItems.map((item) {
                          final statusKey = item['key'];
                          return Container(
                            decoration: BoxDecoration(
                              color: colorMap[statusKey],
                              borderRadius: BorderRadius.circular(30),
                            ),
                            child: Center(
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Text(
                                    item['count'].toString(),
                                    style: const TextStyle(
                                      fontSize: 80,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.white,
                                    ),
                                  ),
                                  const SizedBox(height: 10),
                                  Text(
                                    labelMap[statusKey] ?? statusKey,
                                    style: const TextStyle(
                                      fontSize: 20,
                                      color: Colors.white,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          );
                        }).toList(),
                      ),
                    ),
                    // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° SizedBox ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á
                    const SizedBox(height: 50),
                  ],
                );
              },
            ),
          ),
        ),
      ),
    );
  }
}
